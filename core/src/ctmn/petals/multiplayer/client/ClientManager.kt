package ctmn.petals.multiplayer.clientimport ctmn.petals.multiplayer.JsonMessageimport ctmn.petals.multiplayer.json.clientreq.ClientRequestimport com.badlogic.gdx.utils.Arrayimport com.google.gson.Gsonimport ctmn.petals.multiplayer.json.clientreq.ExecuteCommandimport ctmn.petals.multiplayer.json.serverres.ClientIdMessageimport ctmn.petals.multiplayer.toJsonMessageimport ctmn.petals.utils.fromGsonimport io.netty.channel.ChannelFutureclass ClientManager(private val client: GameClient) {    var clientId: String = "null"    private val responseListeners = Array<ResponseListener>()    private val gson = Gson()    companion object {        val MESSAGE_ID_EVERYTHING = "everything"    }    fun sendMessage(clientRequest: ClientRequest) : ChannelFuture? {        return sendMessage(JsonMessage(gson.toJson(clientRequest)))    }    fun sendMessage(jsonMessage: JsonMessage) : ChannelFuture? {        return client.handler.ctx?.writeAndFlush(jsonMessage)    }    fun receiveResponse(jsonMessage: JsonMessage) {        logger.info("Received response: $jsonMessage")        val messageId = jsonMessage.id        // If we get the client id, save it and send the client id message        if (messageId == "client_id") {            if (clientId == "null")                clientId = fromGson(jsonMessage.message, ClientIdMessage::class.java).clientId            sendMessage(ClientIdMessage(clientId).toJsonMessage())        }        for (listener in responseListeners) {            if (listener.messageId == messageId || listener.messageId == MESSAGE_ID_EVERYTHING) {                listener.responseReceived(jsonMessage)                if (listener.removeOnReceive)                    responseListeners.removeValue(listener, false)            }        }    }    fun executeCommand(req: ExecuteCommand) {        sendMessage(req)    }    fun addResponseListener(listener: ResponseListener) {        responseListeners.add(listener)    }    fun removeResponseListener(listener: ResponseListener) {        responseListeners.removeValue(listener, false)    }}